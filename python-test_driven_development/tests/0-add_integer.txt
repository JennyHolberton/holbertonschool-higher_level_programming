The 0-add_integer module
========================

Using ``add_integer()``
-----------------------

>>> add_integer = __import__("0-add_integer").add_integer

    Given two integers, returns the sum of a and b

    Input should be integers not floats:
    >>> add_integer(1, 2)
    3

    Input should be cast as an integer if a float is provided:
    >>> add_integer(1.3, 2)
    3
    >>> add_integer(1.3, 2.2)
    3

    Function should print raised TypeError if b is a float:
    >>> add_integer(2, 1.3)
    Traceback (most recent call last):
    TypeError: b must be an integer

    Function should produce correct output when given negative numbers:
    >>> add_integer(3, -1)
    2
    >>> add_integer(-5, 7)
    2

    Function should print raised TypeError for strings inputs:
    >>> add_integer("1", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, "2")
    Traceback (most recent call last):
    TypeError: b must be an integer

    Function should print raised TypeError if None is input provided:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    Function should print TypeError if no input is provided:
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    Function should print OverflowError if infinite num is provided:
    >>> add_integer(float('inf'), float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    Function should print SyntaxError if part of argument is a string type:
    >>> add_integer(1abc, 2)
    Traceback (most recent call last):
    SyntaxError: invalid syntax
