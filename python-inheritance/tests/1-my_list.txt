The 1-my_list module
====================

Using ``print_sorted()``
------------------------

>>> MyList = __import__('1-my_list').MyList

    Given a list, print the list in ascending order

    Should print an empty list if given list is empty:
    >>> my_list = MyList()
    >>> print(my_list)
    []
    >>>	my_list.print_sorted()
    []
    >>> print(my_list)
    []

    Should print the list with ordered positive integers/floats:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]
    >>> my_list.print_sorted()
    [1, 2, 3]

    >>> my_list = MyList()
    >>> my_list.append(1.1)
    >>> my_list.append(2.2)
    >>> my_list.append(3.3)
    >>> print(my_list)
    [1.1, 2.2, 3.3]
    >>> my_list.print_sorted()
    [1.1, 2.2, 3.3]

    Should print an ordered list of unordered positive integers/floats:
    >>> my_list = MyList()
    >>> my_list.append(2)
    >>> my_list.append(3.3)
    >>> my_list.append(1)
    >>> print(my_list)
    [2, 3.3, 1]
    >>> my_list.print_sorted()
    [1, 2, 3.3]

    Should print the list with order negative integers/floats:
    >>> my_list = MyList()
    >>> my_list.append(-3)
    >>> my_list.append(-2.2)
    >>> my_list.append(-1)
    >>> print(my_list)
    [-3, -2.2, -1]
    >>> my_list.print_sorted()
    [-3, -2.2, -1]

    Should print an ordered list with unordered negative integer/floats:
    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(-3)
    >>> my_list.append(-2.2)
    >>> print(my_list)
    [-1, -3, -2.2]
    >>> my_list.print_sorted()
    [-3, -2.2, -1]

    Should print the list with duplicate integers/floats:
    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(3.3)
    >>> my_list.append(1)
    >>> print(my_list)
    [3, 1, 4, 3.3, 1]
    >>> my_list.print_sorted()
    [1, 1, 3, 3.3, 4]

    Should print the list with a single integer:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> print(my_list)
    [1]
    >>> my_list.print_sorted()
    [1]

    Should print the list with long integers:
    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(500)
    >>> my_list.append(50)
    >>> print(my_list)
    [5, 500, 50]
    >>> my_list.print_sorted()
    [5, 50, 500]

    Should print the list with a mix of positive and negative intgers:
    >>> my_list = MyList()
    >>> my_list.append(4)
    >>> my_list.append(-3)
    >>> my_list.append(16)
    >>> my_list.append(-100)
    >>> print(my_list)
    [4, -3, 16, -100]
    >>> my_list.print_sorted()
    [-100, -3, 4, 16]

    Should print the list with only strings:
    >>> my_list = MyList()
    >>> my_list.append("hey")
    >>> my_list.append("hi")
    >>> my_list.append("hello")
    >>> print(my_list)
    ['hey', 'hi', 'hello']
    >>> my_list.print_sorted()
    ['hello', 'hey', 'hi']

    Should raise TypeError if a mix of types are given in list to sort:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append("world")
    >>> my_list.append(1)
    >>> my_list.append("love")
    >>> print(my_list)
    [1, 'world', 1, 'love']
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'

    Should raise TypeError if None is given as an argument:
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable
